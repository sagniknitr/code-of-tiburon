// Generated by gencpp from file vn_100/send_arduino.msg
// DO NOT EDIT!


#ifndef VN_100_MESSAGE_SEND_ARDUINO_H
#define VN_100_MESSAGE_SEND_ARDUINO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace vn_100
{
template <class ContainerAllocator>
struct send_arduino_
{
  typedef send_arduino_<ContainerAllocator> Type;

  send_arduino_()
    : header_1()
    , sensor()
    , quat_data_1()  {
      quat_data_1.assign(0.0);
  }
  send_arduino_(const ContainerAllocator& _alloc)
    : header_1(_alloc)
    , sensor(_alloc)
    , quat_data_1()  {
      quat_data_1.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_1_type;
  _header_1_type header_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sensor_type;
  _sensor_type sensor;

   typedef boost::array<float, 4>  _quat_data_1_type;
  _quat_data_1_type quat_data_1;




  typedef boost::shared_ptr< ::vn_100::send_arduino_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vn_100::send_arduino_<ContainerAllocator> const> ConstPtr;

}; // struct send_arduino_

typedef ::vn_100::send_arduino_<std::allocator<void> > send_arduino;

typedef boost::shared_ptr< ::vn_100::send_arduino > send_arduinoPtr;
typedef boost::shared_ptr< ::vn_100::send_arduino const> send_arduinoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vn_100::send_arduino_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vn_100::send_arduino_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vn_100

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vn_100': ['/home/opp/Documents/auv-nitr/src/vn_100/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vn_100::send_arduino_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vn_100::send_arduino_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vn_100::send_arduino_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vn_100::send_arduino_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vn_100::send_arduino_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vn_100::send_arduino_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vn_100::send_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0356d4c592d7d6a6ce8c2b527dfae48";
  }

  static const char* value(const ::vn_100::send_arduino_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0356d4c592d7d6aULL;
  static const uint64_t static_value2 = 0x6ce8c2b527dfae48ULL;
};

template<class ContainerAllocator>
struct DataType< ::vn_100::send_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vn_100/send_arduino";
  }

  static const char* value(const ::vn_100::send_arduino_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vn_100::send_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header        header_1\n\
geometry_msgs/Vector3  sensor\n\
float32[4]              quat_data_1\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vn_100::send_arduino_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vn_100::send_arduino_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header_1);
      stream.next(m.sensor);
      stream.next(m.quat_data_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct send_arduino_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vn_100::send_arduino_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vn_100::send_arduino_<ContainerAllocator>& v)
  {
    s << indent << "header_1: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header_1);
    s << indent << "sensor: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor);
    s << indent << "quat_data_1[]" << std::endl;
    for (size_t i = 0; i < v.quat_data_1.size(); ++i)
    {
      s << indent << "  quat_data_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat_data_1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VN_100_MESSAGE_SEND_ARDUINO_H
